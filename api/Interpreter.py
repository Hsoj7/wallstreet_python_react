"""
Python interpreter for data generated by RedditScraper class created by Joshua Stone

https://www.reddit.com/r/wallstreetbets/comments/ojcfk1/daily_discussion_thread_for_july_13_2021/

to do:
    -Make React front end. Connect this to the code written for HCI, CIS4300
    -flask, rest API
    -Display cards of the top stocks, have all the information wanted for the stock

    -add sentiment meter: buy/sell + bull/bear. Look into tensor flow for this?
    -Look into pytorch + tensor flow
    -time series deep learning algorithm

    -type in a word and have a sentiment based on that one company

    -Add crypto section

    -Save results into file in the evening each day. See what the likelihood of
    buying the top stock would generate revenue
"""

from RedditScraper import RedditScraper
from stockInfo import stockInfo
import os, os.path
from collections import Counter
import re
import yfinance as yf
from datetime import datetime

# Function to instantiate the RedditScraper class and retrieve comments
def runRedditScraper():
    # print("Enter link to the subreddit: ")
    # # Get the link to the subreddit
    # url = input()

    #Update this line with newest subreddit daily discussion link
    url = "https://www.reddit.com/r/wallstreetbets/comments/otuiae/daily_discussion_thread_for_july_29_2021/"

    numFiles = len(os.listdir('.')) - 4
    filenameStr = "./data" + str(numFiles) + ".txt"

    # Create instance of RedditScraper class
    scrapeInstance = RedditScraper(url, filenameStr)
    scrapeInstance.scrape()

    print("SUCCESS: Data stored in data" + str(numFiles) + ".txt")

# Function to display the most common stock symbols
def getCommonNames():
    numFiles = len(os.listdir('.')) - 5
    filenameStr = "./data" + str(numFiles) + ".txt"
    # Open data file generated from RedditScraper
    with open(filenameStr, 'r') as file:
        # Read file into data object
        data = file.read().replace('\n', ' ')
    file.close()
    data = re.sub('[^a-zA-Z0-9 \n]', ' ', data)
    # Split into individual words and count each word using imported Coutner library
    split = data.split()
    count = Counter(split)

    # Open common english words to filter out of result
    with open("./commonEnglish.txt", 'r') as file:
        commonEnglish = file.read().replace('\n', ' ')
    file.close()
    split2 = commonEnglish.split()

    symbolList = []

    # Get the 1000 most common words from the data generated
    most_common = count.most_common(1000)
    # Turn data into tuples of the word and their frequency
    strings, numbers = zip(*most_common)
    # Counts # of symbols printed so far
    NumSymbols = 0
    # Index for the tuple numbers object
    index = 0
    # Loop through the 1000 most common words
    for word in strings:
        # to print the 20 most common words, change if less/more are wanted
        if NumSymbols < 20:
            # Split2 contains the common english words
            if not word in split2:
                # Make sure ticker symbol is upper case and between 2-5 letters
                if word.isupper():
                    if len(word) > 1:
                        if len(word) < 6:
                            # Output the symbol if we've reached this far!
                            numPrinted = NumSymbols + 1
                                # scrapeInstance = RedditScraper(url, filenameStr)
                            # symbolClass = stockInfo(word, numbers[index])
                            # symbolList.append(symbolClass)
                            symbolList.append(word)
                            print(str(numPrinted) + ": " + word + ", frequency: " + str(numbers[index]))
                            NumSymbols += 1
                            # getStockData(word)
                            # print("")
        else:
            break
        index += 1

    # for sym in symbolList:
    #     print("HERE " + sym.name)
    return symbolList

    # return list of stocks...

# Function to get current price & intra day highs and lows & % change for a given ticker
def getStockData(sym):
    # Get info about the current symbol
    stock = yf.Ticker(sym)
    try:
        # Block to get daily high and daily low stock price
        todays_data = stock.history(period='1d')
        formatted_data = "{:.2f}".format(todays_data['Close'][0])
        formattedLow = "{:.2f}".format(stock.info['dayLow'])
        formattedHigh = "{:.2f}".format(stock.info['dayHigh'])

        #Block to get today's date and yesterday's date used to get yesterday's close price below
        end = datetime.today().strftime('%Y-%m-%d')
        day = int(end[8:10])
        day -= 1
        day = str("%02.0f" % day)
        start = datetime.today().strftime('%Y-%m-%d')
        start = start[0:8]
        start = start + day

    # Case where the symbol retrieved is not a real stock symbol
    # Opens the commonEnglish words file and appends the bad symbol
    # I wanted to automate this process. I was manually entering the symbols
    #   that weren't real stocks but rather all caps short hands/lingo people say
    except:
        print("Bad ticker symbol " + sym)
        # fileObj = open("commonEnglish.txt", 'a')
        # fileObj.write(sym+"\n")
        # fileObj.close()

    try:
        # Gets yesterday close price
        close = stock.history(start=start, end=end, interval='1d')
        temp = float(close['Close'])
        formatted_close = "{:.2f}".format(temp)
        # Calculate the +/- percentage
        difference = ((float(formatted_data) - float(formatted_close)) / float(formatted_data)) * 100
        formatted_difference = "{:.2f}".format(difference)

        # If statement to print a - or + sign in front of the percentage move
        if float(formatted_difference) > 0:
            print("    Current: $" + str(formatted_data) + ", Intra-Day Range: $" + str(formattedLow) + "-$" + str(formattedHigh) + ", Daily Difference: +" + formatted_difference + "%")
        else:
            print("    Current: $" + str(formatted_data) + ", Intra-Day Range: $" + str(formattedLow) + "-$" + str(formattedHigh) + ", Daily Difference: " + formatted_difference + "%")
    except:
        print("Mondays may cause error. No market data for Sundays.")


# Main entry point
if __name__ == '__main__':
    #auto generates data[x].txt based on how many files are in the directory
    numFiles = len(os.listdir('.')) - 4
    filenameStr = "./data" + str(numFiles) + ".txt"
    runRedditScraper()
    getCommonNames()
